version: '3'

vars:
  NAMESPACE: default
  GATEWAY_NAME: envoy-ai-gateway
  BACKEND_NAME: llm-d-inference-sim
  MODEL: qwen3
  PORT_FORWARD: 8080

tasks:
  default:
    desc: "Show available tasks"
    cmds:
      - task --list --sort=none

  prerequisites:
    desc: "Run prerequisites tasks"
    dir: ../../
    cmds:
      - task setup-all

  setup:
    desc: "Complete setup of the demo environment"
    cmds:
      - task: prerequisites
      - task: deploy
      - task: wait-ready
      - echo "Setup complete! Run 'task test' to test the gateway"
    generates:
      - .task/setup.done
    status:
      - test -f .task/setup.done

  deploy:
    desc: "Deploy the Envoy AI Gateway with LLM-D Inference Simulator"
    cmds:
      - kubectl apply -f envoy-ai-gateway-infra.yaml
      - kubectl apply -f envoy-ai-gateway-aigatewayroute.yaml
      - kubectl apply -f llm-d-inference-sim.yaml
      - echo "Deployment initiated..."

  wait-ready:
    desc: "Wait for all components to be ready"
    cmds:
      - echo "Waiting for LLM-D Inference Simulator to be ready..."
      - kubectl wait --for=condition=ready pod -l app={{.BACKEND_NAME}} -n {{.NAMESPACE}} --timeout=300s
      - echo "Waiting for Gateway to be ready..."
      - kubectl wait --for=condition=ready -l gateway.envoyproxy.io/owning-gateway-name={{.GATEWAY_NAME}} -n envoy-gateway-system --timeout=300s || echo "Gateway may take longer to be ready, continuing..."
      - echo "All components are ready!"

  port-forward:
    desc: "Start port forwarding in background"
    cmds:
      - |
        # Check if port-forward is already running
        if [ -f .task/port-forward.pid ]; then
          PID=$(cat .task/port-forward.pid)
          if kill -0 $PID 2>/dev/null; then
            echo "Port forwarding already running on PID $PID"
            exit 0
          fi
        fi
        
        # Start port forwarding in background
        mkdir -p .task
        ENVOY_SERVICE=$(kubectl get svc -n envoy-gateway-system -l gateway.envoyproxy.io/owning-gateway-name={{.GATEWAY_NAME}} -o jsonpath='{.items[0].metadata.name}')
        echo "Starting port forwarding to service: $ENVOY_SERVICE on port {{.PORT_FORWARD}}"
        nohup kubectl port-forward -n envoy-gateway-system svc/$ENVOY_SERVICE {{.PORT_FORWARD}}:80 > .task/port-forward.log 2>&1 &
        echo $! > .task/port-forward.pid
        
        # Wait for port forwarding to be ready
        echo "Waiting for port forwarding to be ready..."
        sleep 3
        echo "✅ Port forwarding started in background (PID: $(cat .task/port-forward.pid))"
        echo "Use 'task stop-port-forward' to stop"
    generates:
      - .task/port-forward.pid
    status:
      - test -f .task/port-forward.pid
      - kill -0 $(cat .task/port-forward.pid 2>/dev/null) 2>/dev/null

  stop-port-forward:
    desc: "Stop background port forwarding"
    cmds:
      - |
        if [ -f .task/port-forward.pid ]; then
          PID=$(cat .task/port-forward.pid)
          if kill -0 $PID 2>/dev/null; then
            echo "Stopping port forwarding (PID: $PID)"
            kill $PID
            sleep 2
            # Force kill if still running
            kill -9 $PID 2>/dev/null || true
            echo "✅ Port forwarding stopped"
          else
            echo "Port forwarding process not running"
          fi
          rm -f .task/port-forward.pid .task/port-forward.log
        else
          echo "No port forwarding process found"
        fi
        # Also kill any kubectl port-forward processes for this port
        pkill -f "kubectl.*port-forward.*{{.PORT_FORWARD}}" || true

  test:
    desc: "Test the AI Gateway endpoints"
    deps: [test-chat, test-stream, test-models]
    cmds:
      - task: footer

  test-chat:
    desc: "Test chat completions endpoint"
    cmds:
      - |
        echo "Testing chat completions..."
        curl -H "Content-Type: application/json" \
          -d '{
            "model": "{{.MODEL}}",
            "messages": [{"role": "user", "content": "Hello, AI Gateway with LLM-D Inference!"}]
          }' \
          http://localhost:{{.PORT_FORWARD}}/v1/chat/completions | jq . || echo "Make sure port-forward is running: task port-forward"

  test-models:
    desc: "Test models endpoint"
    cmds:
      - |
        echo "Testing models endpoint..."
        curl http://localhost:{{.PORT_FORWARD}}/v1/models | jq . || echo "Make sure port-forward is running: task port-forward"


  test-stream:
    desc: "Test streaming chat completions"
    cmds:
      - |
        echo "Testing streaming chat completions..."
        curl -H "Content-Type: application/json" \
          -d '{
            "model": "{{.MODEL}}",
            "messages": [{"role": "user", "content": "Stream this response please"}],
            "stream": true
          }' \
          http://localhost:{{.PORT_FORWARD}}/v1/chat/completions || echo "Make sure port-forward is running: task port-forward"

  test-interactive:
    desc: "Send interactive message"
    interactive: true
    cmds:
      - |
        echo "Interactive chat..."
        read -p "Enter your message: " INPUT
        curl -H "Content-Type: application/json" \
          -d "{
            \"model\": \"{{.MODEL}}\",
            \"messages\": [{\"role\": \"user\", \"content\": \"$INPUT\"}]
          }" \
          http://localhost:{{.PORT_FORWARD}}/v1/chat/completions || \
          echo "Make sure port-forward is running: task port-forward"
          
  logs:
    desc: "Show logs from all components"
    cmds:
      - task: logs-simulator
      - task: logs-gateway

  logs-simulator:
    desc: "Show logs from LLM-D Inference Simulator"
    cmds:
      - kubectl logs -l app={{.BACKEND_NAME}} -n {{.NAMESPACE}} --tail=10

  logs-gateway:
    desc: "Show logs from Envoy Gateway"
    cmds:
      - |
        ENVOY_POD=$(kubectl get pods -n envoy-gateway-system --selector=gateway.envoyproxy.io/owning-gateway-name={{.GATEWAY_NAME}},gateway.envoyproxy.io/owning-gateway-namespace={{.NAMESPACE}} -o jsonpath='{.items[0].metadata.name}')
        kubectl logs -n envoy-gateway-system $ENVOY_POD --tail=10 | while read line; do echo "$line" | jq '.' 2>/dev/null || echo "$line"; done

  status:
    desc: "Check status of all components"
    cmds:
      - echo "=== Deployments ==="
      - kubectl get deployments -n {{.NAMESPACE}} -l app={{.BACKEND_NAME}}
      - echo -e "\n=== Pods ==="
      - kubectl get pods -n {{.NAMESPACE}} -l app={{.BACKEND_NAME}}
      - echo -e "\n=== Services ==="
      - kubectl get svc -n {{.NAMESPACE}} {{.BACKEND_NAME}}
      - echo -e "\n=== Gateway ==="
      - kubectl get gateway -n {{.NAMESPACE}} {{.GATEWAY_NAME}}
      - echo -e "\n=== AI Routes ==="
      - kubectl get aigatewayroute -n {{.NAMESPACE}}
      - echo -e "\n=== AI Service Backends ==="
      - kubectl get aiservicebackend -n {{.NAMESPACE}}

  cleanup:
    desc: "Clean up all demo resources"
    cmds:
      - kubectl delete -f envoy-ai-gateway-config.yaml --ignore-not-found=true
      - echo "Cleanup complete"

  restart:
    desc: "Restart the LLM-D Inference Simulator"
    cmds:
      - kubectl rollout restart deployment/{{.BACKEND_NAME}} -n {{.NAMESPACE}}
      - task: wait-ready

  footer:
    desc: "Show footer"
    cmds:
      - echo "Check out the Envoy AI Gateway Basic Usage Guide at https://aigateway.envoyproxy.io/docs/getting-started/basic-usage"